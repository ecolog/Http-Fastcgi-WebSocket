!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/23a223e1/
AMAZON_COM	./test.c	/^#define AMAZON_COM /;"	d	file:
APACHEBENCH_GET	./test.c	/^#define APACHEBENCH_GET /;"	d	file:
AR	./Makefile	/^AR?=ar$/;"	m
ARRAY_SIZE	./http_parser.c	/^# define ARRAY_SIZE(/;"	d	file:
BINEXT	./Makefile	/^BINEXT = .exe.so$/;"	m
BINEXT	./Makefile	/^BINEXT ?=$/;"	m
BIT_AT	./http_parser.c	/^# define BIT_AT(/;"	d	file:
BONJOUR_MADAME_FR	./test.c	/^#define BONJOUR_MADAME_FR /;"	d	file:
CALLBACK_DATA	./http_parser.c	/^#define CALLBACK_DATA(/;"	d	file:
CALLBACK_DATA_	./http_parser.c	/^#define CALLBACK_DATA_(/;"	d	file:
CALLBACK_DATA_NOADVANCE	./http_parser.c	/^#define CALLBACK_DATA_NOADVANCE(/;"	d	file:
CALLBACK_NOTIFY	./http_parser.c	/^#define CALLBACK_NOTIFY(/;"	d	file:
CALLBACK_NOTIFY_	./http_parser.c	/^#define CALLBACK_NOTIFY_(/;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	./http_parser.c	/^#define CALLBACK_NOTIFY_NOADVANCE(/;"	d	file:
CC	./Makefile	/^CC = winegcc$/;"	m
CC	./Makefile	/^CC?=gcc$/;"	m
CFLAGS_BENCH	./Makefile	/^CFLAGS_BENCH = $(CFLAGS_FAST) -Wno-unused-parameter$/;"	m
CFLAGS_DEBUG	./Makefile	/^CFLAGS_DEBUG = $(CFLAGS) -O0 -g $(CFLAGS_DEBUG_EXTRA)$/;"	m
CFLAGS_FAST	./Makefile	/^CFLAGS_FAST = $(CFLAGS) -O3 $(CFLAGS_FAST_EXTRA)$/;"	m
CFLAGS_LIB	./Makefile	/^CFLAGS_LIB = $(CFLAGS_FAST) -fPIC$/;"	m
CHUNKED	./http_parser.c	/^#define CHUNKED /;"	d	file:
CHUNKED_W_BULLSHIT_AFTER_LENGTH	./test.c	/^#define CHUNKED_W_BULLSHIT_AFTER_LENGTH /;"	d	file:
CHUNKED_W_TRAILING_HEADERS	./test.c	/^#define CHUNKED_W_TRAILING_HEADERS /;"	d	file:
CLOSE	./http_parser.c	/^#define CLOSE /;"	d	file:
CONNECTION	./http_parser.c	/^#define CONNECTION /;"	d	file:
CONNECTION_MULTI	./test.c	/^#define CONNECTION_MULTI /;"	d	file:
CONNECTION_MULTI_LWS	./test.c	/^#define CONNECTION_MULTI_LWS /;"	d	file:
CONNECTION_MULTI_LWS_CRLF	./test.c	/^#define CONNECTION_MULTI_LWS_CRLF /;"	d	file:
CONNECT_CAPS_REQUEST	./test.c	/^#define CONNECT_CAPS_REQUEST /;"	d	file:
CONNECT_REQUEST	./test.c	/^#define CONNECT_REQUEST /;"	d	file:
CONNECT_WITH_BODY_REQUEST	./test.c	/^#define CONNECT_WITH_BODY_REQUEST /;"	d	file:
CONTENT_LENGTH	./http_parser.c	/^#define CONTENT_LENGTH /;"	d	file:
CONTENT_LENGTH_X	./test.c	/^#define CONTENT_LENGTH_X /;"	d	file:
COUNT_HEADER_SIZE	./http_parser.c	/^#define COUNT_HEADER_SIZE(/;"	d	file:
CPPFLAGS	./Makefile	/^CPPFLAGS ?=$/;"	m
CPPFLAGS_BENCH	./Makefile	/^CPPFLAGS_BENCH = $(CPPFLAGS_FAST)$/;"	m
CPPFLAGS_DEBUG	./Makefile	/^CPPFLAGS_DEBUG = $(CPPFLAGS) -DHTTP_PARSER_STRICT=1$/;"	m
CPPFLAGS_FAST	./Makefile	/^CPPFLAGS_FAST = $(CPPFLAGS) -DHTTP_PARSER_STRICT=0$/;"	m
CR	./http_parser.c	/^#define CR /;"	d	file:
CURL_GET	./test.c	/^#define CURL_GET /;"	d	file:
CURRENT_STATE	./http_parser.c	/^#define CURRENT_STATE(/;"	d	file:
DUMBFUCK	./test.c	/^#define DUMBFUCK /;"	d	file:
EAT_TRAILING_CRLF_NO_CONNECTION_CLOSE	./test.c	/^#define EAT_TRAILING_CRLF_NO_CONNECTION_CLOSE /;"	d	file:
EAT_TRAILING_CRLF_WITH_CONNECTION_CLOSE	./test.c	/^#define EAT_TRAILING_CRLF_WITH_CONNECTION_CLOSE /;"	d	file:
ELEM_AT	./http_parser.c	/^# define ELEM_AT(/;"	d	file:
EMPTY_REASON_PHRASE_AFTER_SPACE	./test.c	/^#define EMPTY_REASON_PHRASE_AFTER_SPACE /;"	d	file:
FALSE	./test.c	/^#define FALSE /;"	d	file:
FIELD	./test.c	/^  enum { NONE=0, FIELD, VALUE } last_header_element;$/;"	e	enum:message::__anon2773c9130103	file:
FIREFOX_GET	./test.c	/^#define FIREFOX_GET /;"	d	file:
FRAGMENT_IN_URI	./test.c	/^#define FRAGMENT_IN_URI /;"	d	file:
F_CHUNKED	./http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	./http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	./http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_CONNECTION_UPGRADE	./http_parser.h	/^  , F_CONNECTION_UPGRADE    = 1 << 3$/;"	e	enum:flags
F_CONTENTLENGTH	./http_parser.h	/^  , F_CONTENTLENGTH         = 1 << 7$/;"	e	enum:flags
F_SKIPBODY	./http_parser.h	/^  , F_SKIPBODY              = 1 << 6$/;"	e	enum:flags
F_TRAILING	./http_parser.h	/^  , F_TRAILING              = 1 << 4$/;"	e	enum:flags
F_UPGRADE	./http_parser.h	/^  , F_UPGRADE               = 1 << 5$/;"	e	enum:flags
GET_FUNKY_CONTENT_LENGTH	./test.c	/^#define GET_FUNKY_CONTENT_LENGTH /;"	d	file:
GET_NO_HEADERS_NO_BODY	./test.c	/^#define GET_NO_HEADERS_NO_BODY /;"	d	file:
GET_ONE_HEADER_NO_BODY	./test.c	/^#define GET_ONE_HEADER_NO_BODY /;"	d	file:
GOOGLE_301	./test.c	/^#define GOOGLE_301 /;"	d	file:
HELPER	./Makefile	/^HELPER = wine$/;"	m
HELPER	./Makefile	/^HELPER ?=$/;"	m
HOSTNAME_UNDERSCORE	./test.c	/^#define HOSTNAME_UNDERSCORE /;"	d	file:
HTTP_101_RESPONSE_WITH_UPGRADE_HEADER	./test.c	/^#define HTTP_101_RESPONSE_WITH_UPGRADE_HEADER /;"	d	file:
HTTP_101_RESPONSE_WITH_UPGRADE_HEADER_AND_CONTENT_LENGTH	./test.c	/^#define HTTP_101_RESPONSE_WITH_UPGRADE_HEADER_AND_CONTENT_LENGTH /;"	d	file:
HTTP_101_RESPONSE_WITH_UPGRADE_HEADER_AND_TRANSFER_ENCODING	./test.c	/^#define HTTP_101_RESPONSE_WITH_UPGRADE_HEADER_AND_TRANSFER_ENCODING /;"	d	file:
HTTP_200_RESPONSE_WITH_UPGRADE_HEADER	./test.c	/^#define HTTP_200_RESPONSE_WITH_UPGRADE_HEADER /;"	d	file:
HTTP_200_RESPONSE_WITH_UPGRADE_HEADER_AND_CONTENT_LENGTH	./test.c	/^#define HTTP_200_RESPONSE_WITH_UPGRADE_HEADER_AND_CONTENT_LENGTH /;"	d	file:
HTTP_200_RESPONSE_WITH_UPGRADE_HEADER_AND_TRANSFER_ENCODING	./test.c	/^#define HTTP_200_RESPONSE_WITH_UPGRADE_HEADER_AND_TRANSFER_ENCODING /;"	d	file:
HTTP_BOTH	./http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ERRNO_GEN	./http_parser.h	/^#define HTTP_ERRNO_GEN(/;"	d
HTTP_ERRNO_MAP	./http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
HTTP_ERRNO_MAP	./http_parser.h	/^#define HTTP_ERRNO_MAP(/;"	d
HTTP_MAX_HEADER_SIZE	./http_parser.h	/^# define HTTP_MAX_HEADER_SIZE /;"	d
HTTP_METHOD_MAP	./http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	enum:http_method
HTTP_METHOD_MAP	./http_parser.h	/^#define HTTP_METHOD_MAP(/;"	d
HTTP_PARSER_ERRNO	./http_parser.h	/^#define HTTP_PARSER_ERRNO(/;"	d
HTTP_PARSER_STRICT	./http_parser.h	/^# define HTTP_PARSER_STRICT /;"	d
HTTP_PARSER_VERSION_MAJOR	./http_parser.h	/^#define HTTP_PARSER_VERSION_MAJOR /;"	d
HTTP_PARSER_VERSION_MINOR	./http_parser.h	/^#define HTTP_PARSER_VERSION_MINOR /;"	d
HTTP_PARSER_VERSION_PATCH	./http_parser.h	/^#define HTTP_PARSER_VERSION_PATCH /;"	d
HTTP_REQUEST	./http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	./http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_STATUS_MAP	./http_parser.h	/^  HTTP_STATUS_MAP(XX)$/;"	e	enum:http_status
HTTP_STATUS_MAP	./http_parser.h	/^#define HTTP_STATUS_MAP(/;"	d
HTTP_STRERROR_GEN	./http_parser.c	/^#define HTTP_STRERROR_GEN(/;"	d	file:
HTTP_VERSION_0_9	./test.c	/^#define HTTP_VERSION_0_9 /;"	d	file:
INCLUDEDIR	./Makefile	/^INCLUDEDIR = $(PREFIX)\/include$/;"	m
INSTALL	./Makefile	/^INSTALL ?= install$/;"	m
IS_ALPHA	./http_parser.c	/^#define IS_ALPHA(/;"	d	file:
IS_ALPHANUM	./http_parser.c	/^#define IS_ALPHANUM(/;"	d	file:
IS_HEADER_CHAR	./http_parser.c	/^#define IS_HEADER_CHAR(/;"	d	file:
IS_HEX	./http_parser.c	/^#define IS_HEX(/;"	d	file:
IS_HOST_CHAR	./http_parser.c	/^#define IS_HOST_CHAR(/;"	d	file:
IS_MARK	./http_parser.c	/^#define IS_MARK(/;"	d	file:
IS_NUM	./http_parser.c	/^#define IS_NUM(/;"	d	file:
IS_URL_CHAR	./http_parser.c	/^#define IS_URL_CHAR(/;"	d	file:
IS_USERINFO_CHAR	./http_parser.c	/^#define IS_USERINFO_CHAR(/;"	d	file:
KEEP_ALIVE	./http_parser.c	/^#define KEEP_ALIVE /;"	d	file:
LDFLAGS	./Makefile	/^LDFLAGS ?=$/;"	m
LDFLAGS_LIB	./Makefile	/^LDFLAGS_LIB = $(LDFLAGS) -shared$/;"	m
LF	./http_parser.c	/^#define LF /;"	d	file:
LIBDIR	./Makefile	/^LIBDIR = $(PREFIX)\/lib$/;"	m
LIBNAME	./Makefile	/^LIBNAME ?= $(SOLIBNAME).$(SOEXT).$(SOMAJOR).$(SOMINOR).$(SOREV)$/;"	m
LIBNAME	./Makefile	/^LIBNAME ?= $(SOLIBNAME).$(SOMAJOR).$(SOMINOR).$(SOREV).$(SOEXT)$/;"	m
LIKELY	./http_parser.c	/^# define LIKELY(/;"	d	file:
LINE_FOLDING_IN_HEADER	./test.c	/^#define LINE_FOLDING_IN_HEADER /;"	d	file:
LINE_FOLDING_IN_HEADER_WITH_LF	./test.c	/^#define LINE_FOLDING_IN_HEADER_WITH_LF /;"	d	file:
LINK_REQUEST	./test.c	/^#define LINK_REQUEST /;"	d	file:
LOWER	./http_parser.c	/^#define LOWER(/;"	d	file:
MARK	./http_parser.c	/^#define MARK(/;"	d	file:
MAX_CHUNKS	./test.c	/^#define MAX_CHUNKS /;"	d	file:
MAX_ELEMENT_SIZE	./test.c	/^#define MAX_ELEMENT_SIZE /;"	d	file:
MAX_HEADERS	./test.c	/^#define MAX_HEADERS /;"	d	file:
MESSAGE_CHECK_NUM_EQ	./test.c	/^#define MESSAGE_CHECK_NUM_EQ(/;"	d	file:
MESSAGE_CHECK_STR_EQ	./test.c	/^#define MESSAGE_CHECK_STR_EQ(/;"	d	file:
MESSAGE_CHECK_URL_EQ	./test.c	/^#define MESSAGE_CHECK_URL_EQ(/;"	d	file:
MIN	./http_parser.c	/^# define MIN(/;"	d	file:
MIN	./test.c	/^#define MIN(/;"	d	file:
MSEARCH_REQ	./test.c	/^#define MSEARCH_REQ /;"	d	file:
NEW_MESSAGE	./http_parser.c	/^# define NEW_MESSAGE(/;"	d	file:
NONE	./test.c	/^  enum { NONE=0, FIELD, VALUE } last_header_element;$/;"	e	enum:message::__anon2773c9130103	file:
NON_ASCII_IN_STATUS_LINE	./test.c	/^#define NON_ASCII_IN_STATUS_LINE /;"	d	file:
NO_BODY_HTTP10_KA_200	./test.c	/^#define NO_BODY_HTTP10_KA_200 /;"	d	file:
NO_BODY_HTTP10_KA_204	./test.c	/^#define NO_BODY_HTTP10_KA_204 /;"	d	file:
NO_BODY_HTTP11_KA_200	./test.c	/^#define NO_BODY_HTTP11_KA_200 /;"	d	file:
NO_BODY_HTTP11_KA_204	./test.c	/^#define NO_BODY_HTTP11_KA_204 /;"	d	file:
NO_BODY_HTTP11_KA_CHUNKED_200	./test.c	/^#define NO_BODY_HTTP11_KA_CHUNKED_200 /;"	d	file:
NO_BODY_HTTP11_NOKA_204	./test.c	/^#define NO_BODY_HTTP11_NOKA_204 /;"	d	file:
NO_CARRIAGE_RET	./test.c	/^#define NO_CARRIAGE_RET /;"	d	file:
NO_CONTENT_LENGTH_NO_TRANSFER_ENCODING_RESPONSE	./test.c	/^#define NO_CONTENT_LENGTH_NO_TRANSFER_ENCODING_RESPONSE /;"	d	file:
NO_CONTENT_LENGTH_RESPONSE	./test.c	/^#define NO_CONTENT_LENGTH_RESPONSE /;"	d	file:
NO_HEADERS_NO_BODY_404	./test.c	/^#define NO_HEADERS_NO_BODY_404 /;"	d	file:
NO_HTTP_VERSION	./test.c	/^#define NO_HTTP_VERSION /;"	d	file:
NO_REASON_PHRASE	./test.c	/^#define NO_REASON_PHRASE /;"	d	file:
PARSING_HEADER	./http_parser.c	/^#define PARSING_HEADER(/;"	d	file:
PATCH_REQ	./test.c	/^#define PATCH_REQ /;"	d	file:
PLATFORM	./Makefile	/^PLATFORM ?= $(shell sh -c 'uname -s | tr "[A-Z]" "[a-z]"')$/;"	m
POST_CHUNKED_ALL_YOUR_BASE	./test.c	/^#define POST_CHUNKED_ALL_YOUR_BASE /;"	d	file:
POST_IDENTITY_BODY_WORLD	./test.c	/^#define POST_IDENTITY_BODY_WORLD /;"	d	file:
PREFIX	./Makefile	/^PREFIX ?= \/usr\/local$/;"	m
PREFIX_NEWLINE_GET	./test.c	/^#define PREFIX_NEWLINE_GET /;"	d	file:
PROXY_CONNECTION	./http_parser.c	/^#define PROXY_CONNECTION /;"	d	file:
PROXY_CONNECTION	./test.c	/^#define PROXY_CONNECTION /;"	d	file:
PROXY_WITH_BASIC_AUTH	./test.c	/^#define PROXY_WITH_BASIC_AUTH /;"	d	file:
PURGE_REQ	./test.c	/^#define PURGE_REQ /;"	d	file:
QUERY_TERMINATED_HOST	./test.c	/^#define QUERY_TERMINATED_HOST /;"	d	file:
QUERY_TERMINATED_HOSTPORT	./test.c	/^#define QUERY_TERMINATED_HOSTPORT /;"	d	file:
QUERY_URL_WITH_QUESTION_MARK_GET	./test.c	/^#define QUERY_URL_WITH_QUESTION_MARK_GET /;"	d	file:
REEXECUTE	./http_parser.c	/^#define REEXECUTE(/;"	d	file:
REPORT_REQ	./test.c	/^#define REPORT_REQ /;"	d	file:
RES_FIELD_UNDERSCORE	./test.c	/^#define RES_FIELD_UNDERSCORE /;"	d	file:
RETURN	./http_parser.c	/^#define RETURN(/;"	d	file:
SEARCH_REQ	./test.c	/^#define SEARCH_REQ /;"	d	file:
SET_ERRNO	./http_parser.c	/^#define SET_ERRNO(/;"	d	file:
SOEXT	./Makefile	/^SOEXT ?= dylib$/;"	m
SOEXT	./Makefile	/^SOEXT ?= so$/;"	m
SOLIBNAME	./Makefile	/^SOLIBNAME = libhttp_parser$/;"	m
SOMAJOR	./Makefile	/^SOMAJOR = 2$/;"	m
SOMINOR	./Makefile	/^SOMINOR = 8$/;"	m
SONAME	./Makefile	/^SONAME ?= $(SOLIBNAME).$(SOEXT).$(SOMAJOR).$(SOMINOR)$/;"	m
SONAME	./Makefile	/^SONAME ?= $(SOLIBNAME).$(SOMAJOR).$(SOMINOR).$(SOEXT)$/;"	m
SOREV	./Makefile	/^SOREV   = 0$/;"	m
SOURCE_REQUEST	./test.c	/^#define SOURCE_REQUEST /;"	d	file:
SPACE_IN_FIELD_RES	./test.c	/^#define SPACE_IN_FIELD_RES /;"	d	file:
SPACE_TERMINATED_HOSTPORT	./test.c	/^#define SPACE_TERMINATED_HOSTPORT /;"	d	file:
STRICT_CHECK	./http_parser.c	/^# define STRICT_CHECK(/;"	d	file:
STRICT_TOKEN	./http_parser.c	/^#define STRICT_TOKEN(/;"	d	file:
T	./http_parser.c	/^# define T(/;"	d	file:
TOKEN	./http_parser.c	/^#define TOKEN(/;"	d	file:
TRAILING_SPACE_ON_CHUNKED_BODY	./test.c	/^#define TRAILING_SPACE_ON_CHUNKED_BODY /;"	d	file:
TRANSFER_ENCODING	./http_parser.c	/^#define TRANSFER_ENCODING /;"	d	file:
TRUE	./test.c	/^#define TRUE /;"	d	file:
TWO_CHUNKS_MULT_ZERO_END	./test.c	/^#define TWO_CHUNKS_MULT_ZERO_END /;"	d	file:
UF_FRAGMENT	./http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	./http_parser.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	./http_parser.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	./http_parser.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	./http_parser.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	./http_parser.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	./http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	./http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
ULLONG_MAX	./http_parser.c	/^# define ULLONG_MAX /;"	d	file:
UNDERSTORE_HEADER_KEY	./test.c	/^#define UNDERSTORE_HEADER_KEY /;"	d	file:
UNLIKELY	./http_parser.c	/^# define UNLIKELY(/;"	d	file:
UNLINK_REQUEST	./test.c	/^#define UNLINK_REQUEST /;"	d	file:
UPDATE_STATE	./http_parser.c	/^#define UPDATE_STATE(/;"	d	file:
UPGRADE	./http_parser.c	/^#define UPGRADE /;"	d	file:
UPGRADE_POST_REQUEST	./test.c	/^#define UPGRADE_POST_REQUEST /;"	d	file:
UPGRADE_REQUEST	./test.c	/^#define UPGRADE_REQUEST /;"	d	file:
UTF8_PATH_REQ	./test.c	/^#define UTF8_PATH_REQ /;"	d	file:
VALUE	./test.c	/^  enum { NONE=0, FIELD, VALUE } last_header_element;$/;"	e	enum:message::__anon2773c9130103	file:
WITH_QUOTES	./test.c	/^#define WITH_QUOTES /;"	d	file:
X	./test.c	/^#define X(/;"	d	file:
XX	./http_parser.c	/^#define XX(/;"	d	file:
XX	./http_parser.h	/^#define XX(/;"	d
__anon2773c9130103	./test.c	/^  enum { NONE=0, FIELD, VALUE } last_header_element;$/;"	g	struct:message	file:
__anon445bc9ff0108	./http_parser.c	/^static struct {$/;"	s	file:
__anon445bca040108	./http_parser.h	/^  struct {$/;"	s	struct:http_parser_url
bench	./Makefile	/^bench: http_parser.o bench.o$/;"	t
bench	./bench.c	/^int bench(int iter_count, int silent) {$/;"	f	typeref:typename:int
bench.o	./Makefile	/^bench.o: bench.c http_parser.h Makefile$/;"	t
body	./test.c	/^  char body[MAX_ELEMENT_SIZE];$/;"	m	struct:message	typeref:typename:char[]	file:
body_cb	./test.c	/^body_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
body_is_final	./test.c	/^  int body_is_final;$/;"	m	struct:message	typeref:typename:int	file:
body_size	./test.c	/^  size_t body_size;$/;"	m	struct:message	typeref:typename:size_t	file:
check_body_is_final	./test.c	/^check_body_is_final (const http_parser *p)$/;"	f	typeref:typename:void
check_num_eq	./test.c	/^check_num_eq (const struct message *m,$/;"	f	typeref:typename:int	file:
check_str_eq	./test.c	/^check_str_eq (const struct message *m,$/;"	f	typeref:typename:int	file:
chunk_complete_cb	./test.c	/^chunk_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
chunk_header_cb	./test.c	/^chunk_header_cb (http_parser *p)$/;"	f	typeref:typename:int
chunk_lengths	./test.c	/^  int chunk_lengths[MAX_CHUNKS];$/;"	m	struct:message	typeref:typename:int[]	file:
clean	./Makefile	/^clean:$/;"	t
connect_headers_complete_cb	./test.c	/^connect_headers_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
connect_message_complete_cb	./test.c	/^connect_message_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
content_length	./http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser	typeref:typename:uint64_t
contrib/parsertrace.c	./Makefile	/^contrib\/parsertrace.c:	http_parser.h$/;"	t
contrib/url_parser.c	./Makefile	/^contrib\/url_parser.c:	http_parser.h$/;"	t
count_body_cb	./test.c	/^count_body_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
count_parsed_messages	./test.c	/^count_parsed_messages(const size_t nmsgs, ...) {$/;"	f	typeref:typename:size_t
create_large_chunked_message	./test.c	/^create_large_chunked_message (int body_size_in_kb, const char* headers)$/;"	f	typeref:typename:char *
current_pause_parser	./test.c	/^static http_parser_settings *current_pause_parser;$/;"	v	typeref:typename:http_parser_settings *	file:
currently_parsing_eof	./test.c	/^static int currently_parsing_eof;$/;"	v	typeref:typename:int	file:
data	./bench.c	/^static const char data[] =$/;"	v	typeref:typename:const char[]	file:
data	./http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser	typeref:typename:void *
data_len	./bench.c	/^static const size_t data_len = sizeof(data) - 1;$/;"	v	typeref:typename:const size_t	file:
description	./http_parser.c	/^  const char *description;$/;"	m	struct:__anon445bc9ff0108	typeref:typename:const char *	file:
dontcall_body_cb	./test.c	/^dontcall_body_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
dontcall_chunk_complete_cb	./test.c	/^dontcall_chunk_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
dontcall_chunk_header_cb	./test.c	/^dontcall_chunk_header_cb (http_parser *p)$/;"	f	typeref:typename:int
dontcall_header_field_cb	./test.c	/^dontcall_header_field_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
dontcall_header_value_cb	./test.c	/^dontcall_header_value_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
dontcall_headers_complete_cb	./test.c	/^dontcall_headers_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
dontcall_message_begin_cb	./test.c	/^dontcall_message_begin_cb (http_parser *p)$/;"	f	typeref:typename:int
dontcall_message_complete_cb	./test.c	/^dontcall_message_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
dontcall_request_url_cb	./test.c	/^dontcall_request_url_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
dontcall_response_status_cb	./test.c	/^dontcall_response_status_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
dump_url	./contrib/url_parser.c	/^dump_url (const char *url, const struct http_parser_url *u)$/;"	f	typeref:typename:void
dump_url	./test.c	/^dump_url (const char *url, const struct http_parser_url *u)$/;"	f	typeref:typename:void
field_data	./http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon445bca040108[]
field_set	./http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url	typeref:typename:uint16_t
flags	./http_parser.h	/^  unsigned int flags : 8;        \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:8
flags	./http_parser.h	/^enum flags$/;"	g
fragment	./test.c	/^  char fragment[MAX_ELEMENT_SIZE];$/;"	m	struct:message	typeref:typename:char[]	file:
h_C	./http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	./http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	./http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	./http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	./http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	./http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_connection_upgrade	./http_parser.c	/^  , h_connection_upgrade$/;"	e	enum:header_states	file:
h_content_length	./http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_general	./http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	./http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	./http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	./http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_connection_token	./http_parser.c	/^  , h_matching_connection_token$/;"	e	enum:header_states	file:
h_matching_connection_token_start	./http_parser.c	/^  , h_matching_connection_token_start$/;"	e	enum:header_states	file:
h_matching_connection_upgrade	./http_parser.c	/^  , h_matching_connection_upgrade$/;"	e	enum:header_states	file:
h_matching_content_length	./http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	./http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	./http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	./http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_upgrade	./http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_transfer_encoding	./http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	./http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	./http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
header_field_cb	./test.c	/^header_field_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
header_state	./http_parser.h	/^  unsigned int header_state : 7; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:7
header_states	./http_parser.c	/^enum header_states$/;"	g	file:
header_value_cb	./test.c	/^header_value_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
headers	./test.c	/^  char headers [MAX_HEADERS][2][MAX_ELEMENT_SIZE];$/;"	m	struct:message	typeref:typename:char[][2][]	file:
headers_complete_cb	./test.c	/^headers_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
headers_complete_cb_called	./test.c	/^  int headers_complete_cb_called;$/;"	m	struct:message	typeref:typename:int	file:
host	./test.c	/^  const char *host;$/;"	m	struct:message	typeref:typename:const char *	file:
http_body_is_final	./http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f	typeref:typename:int
http_cb	./http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t	typeref:typename:int (*)(http_parser *)
http_data_cb	./http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t	typeref:typename:int (*)(http_parser *,const char * at,size_t length)
http_errno	./http_parser.h	/^  unsigned int http_errno : 7;$/;"	m	struct:http_parser	typeref:typename:unsigned int:7
http_errno	./http_parser.h	/^enum http_errno {$/;"	g
http_errno_description	./http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f	typeref:typename:const char *
http_errno_name	./http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f	typeref:typename:const char *
http_host_state	./http_parser.c	/^enum http_host_state$/;"	g	file:
http_major	./http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser	typeref:typename:unsigned short
http_major	./test.c	/^  unsigned short http_major;$/;"	m	struct:message	typeref:typename:unsigned short	file:
http_message_needs_eof	./http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f	typeref:typename:int
http_method	./http_parser.h	/^enum http_method$/;"	g
http_method_str	./http_parser.c	/^http_method_str (enum http_method m)$/;"	f	typeref:typename:const char *
http_minor	./http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser	typeref:typename:unsigned short
http_minor	./test.c	/^  unsigned short http_minor;$/;"	m	struct:message	typeref:typename:unsigned short	file:
http_parse_host	./http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	typeref:typename:int	file:
http_parse_host_char	./http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	typeref:enum:http_host_state	file:
http_parser	./http_parser.h	/^struct http_parser {$/;"	s
http_parser	./http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser.o	./Makefile	/^http_parser.o: http_parser.c http_parser.h Makefile$/;"	t
http_parser_execute	./http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f	typeref:typename:size_t
http_parser_g.o	./Makefile	/^http_parser_g.o: http_parser.c http_parser.h Makefile$/;"	t
http_parser_h	./http_parser.h	/^#define http_parser_h$/;"	d
http_parser_init	./http_parser.c	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f	typeref:typename:void
http_parser_parse_url	./http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f	typeref:typename:int
http_parser_pause	./http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f	typeref:typename:void
http_parser_settings	./http_parser.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	./http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_settings_init	./http_parser.c	/^http_parser_settings_init(http_parser_settings *settings)$/;"	f	typeref:typename:void
http_parser_type	./http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	./http_parser.h	/^struct http_parser_url {$/;"	s
http_parser_url_fields	./http_parser.h	/^enum http_parser_url_fields$/;"	g
http_parser_url_init	./http_parser.c	/^http_parser_url_init(struct http_parser_url *u) {$/;"	f	typeref:typename:void
http_parser_version	./http_parser.c	/^http_parser_version(void) {$/;"	f	typeref:typename:unsigned long
http_should_keep_alive	./http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f	typeref:typename:int
http_status	./http_parser.h	/^enum http_status$/;"	g
http_strerror_tab	./http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anon445bc9ff0108[]
index	./http_parser.h	/^  unsigned int index : 7;        \/* index into current matcher *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:7
install	./Makefile	/^install: library$/;"	t
install-strip	./Makefile	/^install-strip: library$/;"	t
int16_t	./http_parser.h	/^typedef __int16 int16_t;$/;"	t	typeref:typename:__int16
int32_t	./http_parser.h	/^typedef __int32 int32_t;$/;"	t	typeref:typename:__int32
int64_t	./http_parser.h	/^typedef __int64 int64_t;$/;"	t	typeref:typename:__int64
int8_t	./http_parser.h	/^typedef __int8 int8_t;$/;"	t	typeref:typename:__int8
is_connect	./test.c	/^  int is_connect;$/;"	m	struct:url_test	typeref:typename:int	file:
kBytes	./bench.c	/^static const int64_t kBytes = 8LL << 30;$/;"	v	typeref:typename:const int64_t	file:
last_header_element	./test.c	/^  enum { NONE=0, FIELD, VALUE } last_header_element;$/;"	m	struct:message	typeref:enum:message::__anon2773c9130103	file:
len	./http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon445bca040108	typeref:typename:uint16_t
lenient_http_headers	./http_parser.h	/^  unsigned int lenient_http_headers : 1;$/;"	m	struct:http_parser	typeref:typename:unsigned int:1
libhttp_parser.o	./Makefile	/^libhttp_parser.o: http_parser.c http_parser.h Makefile$/;"	t
library	./Makefile	/^library: libhttp_parser.o$/;"	t
main	./bench.c	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	./contrib/parsertrace.c	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	./contrib/url_parser.c	/^int main(int argc, char ** argv) {$/;"	f	typeref:typename:int
main	./test.c	/^main (void)$/;"	f	typeref:typename:int
message	./test.c	/^struct message {$/;"	s	file:
message_begin_cb	./test.c	/^message_begin_cb (http_parser *p)$/;"	f	typeref:typename:int
message_begin_cb_called	./test.c	/^  int message_begin_cb_called;$/;"	m	struct:message	typeref:typename:int	file:
message_complete_cb	./test.c	/^message_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
message_complete_cb_called	./test.c	/^  int message_complete_cb_called;$/;"	m	struct:message	typeref:typename:int	file:
message_complete_on_eof	./test.c	/^  int message_complete_on_eof;$/;"	m	struct:message	typeref:typename:int	file:
message_eq	./test.c	/^message_eq (int index, int connect, const struct message *expected)$/;"	f	typeref:typename:int
messages	./test.c	/^static struct message messages[5];$/;"	v	typeref:struct:message[5]	file:
method	./http_parser.h	/^  unsigned int method : 8;       \/* requests only *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:8
method	./test.c	/^  enum http_method method;$/;"	m	struct:message	typeref:enum:http_method	file:
method_strings	./http_parser.c	/^static const char *method_strings[] =$/;"	v	typeref:typename:const char * []	file:
name	./http_parser.c	/^  const char *name;$/;"	m	struct:__anon445bc9ff0108	typeref:typename:const char *	file:
name	./test.c	/^  const char *name; \/\/ for debugging purposes$/;"	m	struct:message	typeref:typename:const char *	file:
name	./test.c	/^  const char *name;$/;"	m	struct:url_test	typeref:typename:const char *	file:
normal_url_char	./http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	typeref:typename:const uint8_t[32]	file:
nread	./http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser	typeref:typename:uint32_t
num_chunks	./test.c	/^  int num_chunks;$/;"	m	struct:message	typeref:typename:int	file:
num_chunks_complete	./test.c	/^  int num_chunks_complete;$/;"	m	struct:message	typeref:typename:int	file:
num_headers	./test.c	/^  int num_headers;$/;"	m	struct:message	typeref:typename:int	file:
num_messages	./test.c	/^static int num_messages;$/;"	v	typeref:typename:int	file:
off	./http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon445bca040108	typeref:typename:uint16_t
on_body	./contrib/parsertrace.c	/^int on_body(http_parser* _, const char* at, size_t length) {$/;"	f	typeref:typename:int
on_body	./http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
on_chunk_complete	./http_parser.h	/^  http_cb      on_chunk_complete;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_chunk_header	./http_parser.h	/^  http_cb      on_chunk_header;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_data	./bench.c	/^static int on_data(http_parser* p, const char *at, size_t length) {$/;"	f	typeref:typename:int	file:
on_header_field	./contrib/parsertrace.c	/^int on_header_field(http_parser* _, const char* at, size_t length) {$/;"	f	typeref:typename:int
on_header_field	./http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
on_header_value	./contrib/parsertrace.c	/^int on_header_value(http_parser* _, const char* at, size_t length) {$/;"	f	typeref:typename:int
on_header_value	./http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
on_headers_complete	./contrib/parsertrace.c	/^int on_headers_complete(http_parser* _) {$/;"	f	typeref:typename:int
on_headers_complete	./http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_info	./bench.c	/^static int on_info(http_parser* p) {$/;"	f	typeref:typename:int	file:
on_message_begin	./contrib/parsertrace.c	/^int on_message_begin(http_parser* _) {$/;"	f	typeref:typename:int
on_message_begin	./http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_message_complete	./contrib/parsertrace.c	/^int on_message_complete(http_parser* _) {$/;"	f	typeref:typename:int
on_message_complete	./http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_status	./http_parser.h	/^  http_data_cb on_status;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
on_url	./contrib/parsertrace.c	/^int on_url(http_parser* _, const char* at, size_t length) {$/;"	f	typeref:typename:int
on_url	./http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
package	./Makefile	/^package: http_parser.o$/;"	t
parse	./test.c	/^size_t parse (const char *buf, size_t len)$/;"	f	typeref:typename:size_t
parse_connect	./test.c	/^size_t parse_connect (const char *buf, size_t len)$/;"	f	typeref:typename:size_t
parse_count_body	./test.c	/^size_t parse_count_body (const char *buf, size_t len)$/;"	f	typeref:typename:size_t
parse_pause	./test.c	/^size_t parse_pause (const char *buf, size_t len)$/;"	f	typeref:typename:size_t
parse_url_char	./http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	typeref:enum:state	file:
parser	./test.c	/^static http_parser *parser;$/;"	v	typeref:typename:http_parser *	file:
parser_free	./test.c	/^parser_free ()$/;"	f	typeref:typename:void
parser_init	./test.c	/^parser_init (enum http_parser_type type)$/;"	f	typeref:typename:void
parsertrace	./Makefile	/^parsertrace: http_parser.o contrib\/parsertrace.c$/;"	t
parsertrace_g	./Makefile	/^parsertrace_g: http_parser_g.o contrib\/parsertrace.c$/;"	t
pause_body_cb	./test.c	/^pause_body_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
pause_chunk_complete_cb	./test.c	/^pause_chunk_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
pause_chunk_header_cb	./test.c	/^pause_chunk_header_cb (http_parser *p)$/;"	f	typeref:typename:int
pause_header_field_cb	./test.c	/^pause_header_field_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
pause_header_value_cb	./test.c	/^pause_header_value_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
pause_headers_complete_cb	./test.c	/^pause_headers_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
pause_message_begin_cb	./test.c	/^pause_message_begin_cb (http_parser *p)$/;"	f	typeref:typename:int
pause_message_complete_cb	./test.c	/^pause_message_complete_cb (http_parser *p)$/;"	f	typeref:typename:int
pause_request_url_cb	./test.c	/^pause_request_url_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
pause_response_status_cb	./test.c	/^pause_response_status_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
port	./http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url	typeref:typename:uint16_t
port	./test.c	/^  uint16_t port;$/;"	m	struct:message	typeref:typename:uint16_t	file:
print_error	./test.c	/^print_error (const char *raw, size_t error_location)$/;"	f	typeref:typename:void	file:
query_string	./test.c	/^  char query_string[MAX_ELEMENT_SIZE];$/;"	m	struct:message	typeref:typename:char[]	file:
raw	./test.c	/^  const char *raw;$/;"	m	struct:message	typeref:typename:const char *	file:
request_path	./test.c	/^  char request_path[MAX_ELEMENT_SIZE];$/;"	m	struct:message	typeref:typename:char[]	file:
request_url	./test.c	/^  char request_url[MAX_ELEMENT_SIZE];$/;"	m	struct:message	typeref:typename:char[]	file:
request_url_cb	./test.c	/^request_url_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
requests	./test.c	/^const struct message requests[] =$/;"	v	typeref:typename:const struct message[]
response_status	./test.c	/^  char response_status[MAX_ELEMENT_SIZE];$/;"	m	struct:message	typeref:typename:char[]	file:
response_status_cb	./test.c	/^response_status_cb (http_parser *p, const char *buf, size_t len)$/;"	f	typeref:typename:int
responses	./test.c	/^const struct message responses[] =$/;"	v	typeref:typename:const struct message[]
rv	./test.c	/^  int rv;$/;"	m	struct:url_test	typeref:typename:int	file:
s_body_identity	./http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	./http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chunk_data	./http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	./http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	./http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	./http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	./http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	./http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	./http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	./http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_header_almost_done	./http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	./http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	./http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	./http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_discard_lws	./http_parser.c	/^  , s_header_value_discard_lws$/;"	e	enum:state	file:
s_header_value_discard_ws	./http_parser.c	/^  , s_header_value_discard_ws$/;"	e	enum:state	file:
s_header_value_discard_ws_almost_done	./http_parser.c	/^  , s_header_value_discard_ws_almost_done$/;"	e	enum:state	file:
s_header_value_lws	./http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	./http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	./http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	./http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_http_host	./http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	./http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	./http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	./http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	./http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	./http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	./http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	./http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone	./http_parser.c	/^  , s_http_host_v6_zone$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone_start	./http_parser.c	/^  , s_http_host_v6_zone_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	./http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	./http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_message_done	./http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_req_fragment	./http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	./http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	./http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	./http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	./http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	./http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_dot	./http_parser.c	/^  , s_req_http_dot$/;"	e	enum:state	file:
s_req_http_end	./http_parser.c	/^  , s_req_http_end$/;"	e	enum:state	file:
s_req_http_major	./http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	./http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	./http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	./http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	./http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	./http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	./http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	./http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	./http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	./http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	./http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	./http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	./http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	./http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	./http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	./http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	./http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	./http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	./http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_status_code	./http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_dot	./http_parser.c	/^  , s_res_http_dot$/;"	e	enum:state	file:
s_res_http_end	./http_parser.c	/^  , s_res_http_end$/;"	e	enum:state	file:
s_res_http_major	./http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	./http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	./http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	./http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	./http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	./http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_res_status_start	./http_parser.c	/^  , s_res_status_start$/;"	e	enum:state	file:
s_start_req	./http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	./http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	./http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
settings	./bench.c	/^static http_parser_settings settings = {$/;"	v	typeref:typename:http_parser_settings	file:
settings	./test.c	/^static http_parser_settings settings =$/;"	v	typeref:typename:http_parser_settings	file:
settings_connect	./test.c	/^static http_parser_settings settings_connect =$/;"	v	typeref:typename:http_parser_settings	file:
settings_count_body	./test.c	/^static http_parser_settings settings_count_body =$/;"	v	typeref:typename:http_parser_settings	file:
settings_dontcall	./test.c	/^static http_parser_settings settings_dontcall =$/;"	v	typeref:typename:http_parser_settings	file:
settings_null	./test.c	/^static http_parser_settings settings_null =$/;"	v	typeref:typename:http_parser_settings	file:
settings_pause	./test.c	/^static http_parser_settings settings_pause =$/;"	v	typeref:typename:http_parser_settings	file:
should_keep_alive	./test.c	/^  int should_keep_alive;$/;"	m	struct:message	typeref:typename:int	file:
start_state	./http_parser.c	/^#define start_state /;"	d	file:
state	./http_parser.c	/^enum state$/;"	g	file:
state	./http_parser.h	/^  unsigned int state : 7;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:7
status_cb_called	./test.c	/^  int status_cb_called;$/;"	m	struct:message	typeref:typename:int	file:
status_code	./http_parser.h	/^  unsigned int status_code : 16; \/* responses only *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:16
status_code	./test.c	/^  int status_code;$/;"	m	struct:message	typeref:typename:int	file:
strlcat	./test.c	/^strlcat(char *dst, const char *src, size_t len)$/;"	f	typeref:typename:size_t
strlcpy	./test.c	/^strlcpy(char *dst, const char *src, size_t len)$/;"	f	typeref:typename:size_t
strlncat	./test.c	/^strlncat(char *dst, size_t len, const char *src, size_t n)$/;"	f	typeref:typename:size_t
strlncpy	./test.c	/^strlncpy(char *dst, size_t len, const char *src, size_t n)$/;"	f	typeref:typename:size_t
strnlen	./test.c	/^strnlen(const char *s, size_t maxlen)$/;"	f	typeref:typename:size_t
tags	./Makefile	/^tags: http_parser.c http_parser.h test.c$/;"	t
test	./Makefile	/^test: test_g test_fast$/;"	t
test-run-timed	./Makefile	/^test-run-timed: test_fast$/;"	t
test-valgrind	./Makefile	/^test-valgrind: test_g$/;"	t
test.o	./Makefile	/^test.o: test.c http_parser.h Makefile$/;"	t
test_chunk_content_length_overflow_error	./test.c	/^test_chunk_content_length_overflow_error (void)$/;"	f	typeref:typename:void
test_chunked_content_length_error	./test.c	/^test_chunked_content_length_error (int req)$/;"	f	typeref:typename:void
test_content_length_overflow	./test.c	/^test_content_length_overflow (const char *buf, size_t buflen, int expect_ok)$/;"	f	typeref:typename:void	file:
test_double_content_length_error	./test.c	/^test_double_content_length_error (int req)$/;"	f	typeref:typename:void
test_fast	./Makefile	/^test_fast: http_parser.o test.o http_parser.h$/;"	t
test_g	./Makefile	/^test_g: http_parser_g.o test_g.o$/;"	t
test_g.o	./Makefile	/^test_g.o: test.c http_parser.h Makefile$/;"	t
test_header_content_length_overflow_error	./test.c	/^test_header_content_length_overflow_error (void)$/;"	f	typeref:typename:void
test_header_cr_no_lf_error	./test.c	/^test_header_cr_no_lf_error (int req)$/;"	f	typeref:typename:void
test_header_nread_value	./test.c	/^test_header_nread_value ()$/;"	f	typeref:typename:void
test_header_overflow_error	./test.c	/^test_header_overflow_error (int req)$/;"	f	typeref:typename:void
test_invalid_header_content	./test.c	/^test_invalid_header_content (int req, const char* str)$/;"	f	typeref:typename:void
test_invalid_header_field	./test.c	/^test_invalid_header_field (int req, const char* str)$/;"	f	typeref:typename:void
test_invalid_header_field_content_error	./test.c	/^test_invalid_header_field_content_error (int req)$/;"	f	typeref:typename:void
test_invalid_header_field_token_error	./test.c	/^test_invalid_header_field_token_error (int req)$/;"	f	typeref:typename:void
test_message	./test.c	/^test_message (const struct message *message)$/;"	f	typeref:typename:void
test_message_connect	./test.c	/^test_message_connect (const struct message *msg)$/;"	f	typeref:typename:void
test_message_count_body	./test.c	/^test_message_count_body (const struct message *message)$/;"	f	typeref:typename:void
test_message_pause	./test.c	/^test_message_pause (const struct message *msg)$/;"	f	typeref:typename:void
test_method_str	./test.c	/^test_method_str (void)$/;"	f	typeref:typename:void
test_multiple3	./test.c	/^test_multiple3 (const struct message *r1, const struct message *r2, const struct message *r3)$/;"	f	typeref:typename:void
test_no_overflow_long_body	./test.c	/^test_no_overflow_long_body (int req, size_t length)$/;"	f	typeref:typename:void
test_no_overflow_parse_url	./test.c	/^test_no_overflow_parse_url (void)$/;"	f	typeref:typename:void
test_parse_url	./test.c	/^test_parse_url (void)$/;"	f	typeref:typename:void
test_preserve_data	./test.c	/^test_preserve_data (void)$/;"	f	typeref:typename:void
test_scan	./test.c	/^test_scan (const struct message *r1, const struct message *r2, const struct message *r3)$/;"	f	typeref:typename:void
test_simple	./test.c	/^test_simple (const char *buf, enum http_errno err_expected)$/;"	f	typeref:typename:void
test_simple_type	./test.c	/^test_simple_type (const char *buf,$/;"	f	typeref:typename:void
tokens	./http_parser.c	/^static const char tokens[256] = {$/;"	v	typeref:typename:const char[256]	file:
type	./http_parser.h	/^  unsigned int type : 2;         \/* enum http_parser_type *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:2
type	./test.c	/^  enum http_parser_type type;$/;"	m	struct:message	typeref:enum:http_parser_type	file:
u	./test.c	/^  struct http_parser_url u;$/;"	m	struct:url_test	typeref:struct:http_parser_url	file:
uint16_t	./http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t	typeref:typename:unsigned __int16
uint32_t	./http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t	typeref:typename:unsigned __int32
uint64_t	./http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t	typeref:typename:unsigned __int64
uint8_t	./http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t	typeref:typename:unsigned __int8
unhex	./http_parser.c	/^static const int8_t unhex[256] =$/;"	v	typeref:typename:const int8_t[256]	file:
uninstall	./Makefile	/^uninstall:$/;"	t
upgrade	./http_parser.h	/^  unsigned int upgrade : 1;$/;"	m	struct:http_parser	typeref:typename:unsigned int:1
upgrade	./test.c	/^  const char *upgrade; \/\/ upgraded body$/;"	m	struct:message	typeref:typename:const char *	file:
upgrade_message_fix	./test.c	/^upgrade_message_fix(char *body, const size_t nread, const size_t nmsgs, ...) {$/;"	f	typeref:typename:void
url	./test.c	/^  const char *url;$/;"	m	struct:url_test	typeref:typename:const char *	file:
url_parser	./Makefile	/^url_parser: http_parser.o contrib\/url_parser.c$/;"	t
url_parser_g	./Makefile	/^url_parser_g: http_parser_g.o contrib\/url_parser.c$/;"	t
url_test	./test.c	/^struct url_test {$/;"	s	file:
url_tests	./test.c	/^const struct url_test url_tests[] =$/;"	v	typeref:typename:const struct url_test[]
usage	./contrib/parsertrace.c	/^void usage(const char* name) {$/;"	f	typeref:typename:void
userinfo	./test.c	/^  const char *userinfo;$/;"	m	struct:message	typeref:typename:const char *	file:
